*vim-node-inspect* Interactive node debugger


       _                                 _            
__   _(_)_ __ ___        _ __   ___   __| | ___       
\ \ / / | '_ ` _ \ _____| '_ \ / _ \ / _` |/ _ \_____ 
 \ V /| | | | | | |_____| | | | (_) | (_| |  __/_____|
  \_/ |_|_| |_| |_|     |_| |_|\___/ \__,_|\___|      
                                                      
 _                           _   
(_)_ __  ___ _ __   ___  ___| |_ 
| | '_ \/ __| '_ \ / _ \/ __| __|
| | | | \__ \ |_) |  __/ (__| |_ 
|_|_| |_|___/ .__/ \___|\___|\__|
            |_|                  

Interactive Node debugger for (n)vim	


Author:  Eli E. Babila (elibabila@gmail.com)
License: MIT (see VimNodeInspectLicense)
																														


Introduction                             *VimNodeInspectIntroduction*

Debug node sctipts from (n)vim using the devtools protocol.


====================================================================
CONTENTS                                            *VimNodeInspectContents*

    1. Requirements ............................. |VimNodeInspectRequirements|
    2. Starting and stopping .................... |VimNodeInspectStarting|
    3. vim-node-inspect.json config file ........ |VimNodeInspectConfiguration|
    4. Setting breakpoints....................... |VimNodeInspectBreakpoints|
    5. Watches................................... |VimNodeInspectWatches|
    6. Debugging commands........................ |VimNodeInspectCommands|
    7. Connecting to running containers.......... |VimNodeInspectContainers|
		8. Customization ............................ |VimNodeInspectCustomization|
    9. Limitation................................ |VimNodeInspectLimitation|
    10.License................................... |VimNodeInspectLicense|




====================================================================
Requirements                             *VimNodeInspectRequirements*

Vim 8.1 / recent Neovim and node in the path.



====================================================================
Starting and stopping                    *VimNodeInspectStarting*

Start debugging by either running a node script or by attaching to a running script. Both options can be executed manually or automated by using a configuration file. The later in encouraged, see VimNodeInspectConfiguration. When starting a debug session the plugin will look for the configuration file in the current path for the debug configuration. If such does not exist it will try to start debuggin the current buffer.

NodeIndpectStart [config name] [args] - will execute node <buffer> using the current buffer or the script defined in the configuration, and will break on the first instruction. Config name is needed only in the case of multiple configurations
NodeInspectRun [config name] [args] - Either starts as above without stopping on the initial instrution, or, continue a stopped execution
NodeInspectConnect host:port - Connect to a running instance in host:port or to the address defined in the configuration

*Note* node must be started with --inspect when connecting to a running instance. See https://nodejs.org/en/docs/guides/debugging-getting-started/ .

To stop debugging use NodeInspectStop. It will kill the node instance in case or running a script and drop the connection in case of connecting to a running script. Exiting (n)vim will automatically run this command. To list is as the others,

NodeInspectStop - Stop debugging (and kill the node instance)

Pressing Crtl+D or CTRL+C twice in the command window has a similar effect. 

It is possible to toggle the debugging window. As the name suggests,

NodeInspectToggleWindow - Show/Hide the node inspect window


====================================================================
vim-node-inspect.json configuration file	*VimNodeInspectConfiguration*

The configuration file name is 'vim-node-inspect.json' and the plugin searches for it in the current project directory. It is a json file containing startup configuration and connection settings; it takes precedence if exists. The following is available:

"request" - either "launch" or "attach". The former is for executing a script. The second is for connecting to a running node instance.
"program" - in the case of "launch", this is the script's filename and must be present.
"args" - in the case of "launch", this optional parameter provides the list of script arguments in an array.
"address" - in the case of "attach", this is the address to connect to. Can be omitted, in this case it defaults to "127.0.0.1".
"port" - in the case of "attach", this is the port to connect to. Must be present.
"restart" - in the case of "attach", restarts the debug session if the connection breaks. Useful when using a process monitor such as nodemon or pm2. 
"localRoot" - defines the local directory when connecting to a running container. See VimNodeInspectContainers. 
"remoteRoot" -  defines the remote directory when connecting to a running container. See VimNodeInspectContainers. 
"cwd" - working directory for running the script. Defaults to (n)vims current directory. Optional.
"envFile" - path to a file containing environment variables. Optional.
"env" - JSON object containing environment variables definition. Takes precedence over envFile. Optional.

Multiple configurations can be defined by setting a **"configurations"** object which lists the possible configuratins, each having a "name" key which uniquly identifies it. In this case **"NodeInspectStart"** or **"NodeInspectRun"** must be followed by at least one parameter which is the configuration name. Other starting parameters might follow. See below for an example.

All directories must be absolute. "${workspaceFolder}" can be used, it equals to the current working directory (:pwd).


Here's an example for running a local script:

{
	"request": "launch",
	"program": "/Users/eli/Tests/test.js"
}

In case the working directory is "/Users/eli/Tests" this can be written as:

{
	"request": "launch",
	"program": "${workspaceFolder}/test.js"
}

Adding arguments "firstarg" and "secondarg" is done via:

{
	"request": "launch",
	"program": "${workspaceFolder}/test.js",
	"args": [
		"firstarg",
		"secondarg"
	]
}

And here's one for attaching to a running script and restarting on session break:

{
	"request": "attach",
	"port": 9229,
	"restart": true
}

Here's an example of using environment variables with envFile and env. The later takes precedence. 

{
	"request": "launch",
	"program": "${workspaceFolder}/test.js",
	"envFile": "${workspaceFolder}/.env",
	"env": { "MY_ADDITIONAL_VAR": "XYZ"   }
}

Multiple configuration example where two configuraions are present named "connect" and "run". Use **NodeInspectStart run** or **NodeInspectRun run" to start the later.

{
	"configurations": [
		{
			"name": "connect",
			"request": "attach",
			"port": 9229
		},
		{
			"name": "run",
			"request": "launch",
			"program": "${workspaceFolder}/server.js"
		}
	]
}




It is possible to have several config files in case the workspace has several projects who share the same root. In case the configuration file is not found in the current working directory, the curent buffer's directory is searched all the way to the top (as long it is a descendant of the working directory).



====================================================================
Setting breakpoints				*VimNodeInspectBreakpoints*

Use the following command to set/remove breakpoints. Note breakpoints are triggered through Vim and resolved in node, so resolved locations might differ from the triggered ones. The breakpoints signs appear in the resolved locations.

NodeInspectToggleBreakpoint - Toggle breakpoint
NodeInspectRemoveAllBreakpoints - Removes all breakpoints

The plugin saves your breakpoint's locations between Vim sessions. Once the plugin is started it will try and re-activate the breakpoints for the current location, that's for all the breakpoints which root in the current working directory.



====================================================================
Watches										*VimNodeInspectWatches*

There are two ways to add a watch. One is to use the NodeInspectAddWatch command which will add the word under the cursor as a watch. The other is by directly editing the watch window: this will resolve the watches, one per line. 
There is no command for removing a watch; remove it by deleting it from the watch window.

NodeInspectAddWatch - Add the word under the cursor to the watch window


The variables in the current scope will be automatically displayed in the watches window prefixed by an 'A'. This behavior can be disabled by setting g:nodeinspect_auto_watch to 0 (1 is default).



====================================================================
Debugging commands			*VimNodeInspectCommands*

NodeInspectStepOver - Step over
NodeInspectStepInto - Step into
NodeInspectStepOut - Step out


====================================================================
Connecting to running containers *VimNodeInspectContainers*

Working paths both local and remote must be set when connecting to remote containers. That's in order to setup the breakpoints correctly; as the breakpoints are toggeled in vim locally and resolved remotely. Use these two parameters in the config file (VimNodeInspectConfiguration):

"localRoot" - for the local directory
"remoteRoot" -  for the remote directory (inside the container)

Both must be absolute. Here's an example of a config file which connects to remote container on port 9229 (the default) and restarts the debugging session when connection breaks:

{
	"request": "attach",
	"port": 9229,
  "localRoot": "${workspaceFolder}/my-test-project",
  "remoteRoot": "/app",
	"restart": true
}


====================================================================
Customization							*VimNodeInspectCustomization*

The debugger windows appear on the bottom by default. Set it with the following parameter

let g:nodeinspect_window_pos = 'right'|'left'|'bottom'.


====================================================================
Limitation							*VimNodeInspectLimitation*

Windows container support was not tested. It might or might not work. 



====================================================================
License									*VimNodeInspectLicense*

MIT.

